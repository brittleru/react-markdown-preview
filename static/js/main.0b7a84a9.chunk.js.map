{"version":3,"sources":["logo.svg","TextInput.js","TextOutput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TextInput","className","title","name","id","cols","rows","placeholder","value","this","props","onChange","handleInput","Component","marked","require","renderer","Renderer","setOptions","gfm","breaks","link","address","content","TextOutput","a","__html","dangerouslySetInnerHTML","markItUp","App","state","userInput","defaultHolder","handleUserInput","bind","e","setState","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,sHC2B5BC,G,kLArBX,OACE,yBAAKC,UAAU,SACT,8BACAC,MAAM,SACNC,KAAK,QACLC,GAAG,SACHC,KAAK,KACLC,KAAK,KACLC,YAAY,eACZC,MAAOC,KAAKC,MAAMF,MAClBG,SAAUF,KAAKC,MAAME,YACrBX,UAAU,kB,GAbEY,cCFlBC,EAASC,EAAQ,IAEjBC,EAAW,IAAIF,EAAOG,SAE5BH,EAAOI,WAAW,CACfC,KAAK,EACLC,QAAQ,IAIXJ,EAASK,KAAO,eAACC,EAAD,uDAAW,IAAKpB,EAAhB,uDAAwB,GAAIqB,EAA5B,uDAAsC,GAAtC,wCACcD,EADd,kBAC+BpB,EAD/B,YACwCqB,EADxC,S,IAuBDC,E,uKAlBJC,GAEP,MAAO,CAACC,OAAQD,K,+BAIhB,OACE,yBAAKxB,UAAU,SACf,yBACE0B,wBAA2BlB,KAAKmB,SAASd,EAAOL,KAAKC,MAAMF,QAC3DP,UAAU,YACVG,GAAG,iB,GAZcS,aCRnBgB,E,kDACJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDoB,MAAQ,CACXC,UAAWC,GAEb,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBALN,E,4DAOHC,GACd1B,KAAK2B,SAAS,CACZL,UAAWI,EAAEE,OAAO7B,U,+BAKtB,OACE,yBAAKP,UAAU,OAEb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,6BAEF,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEW,YAAaH,KAAKwB,gBAClBzB,MAAOC,KAAKqB,MAAMC,YAEpB,kBAAC,EAAD,CAAYvB,MAAOC,KAAKqB,MAAMC,aAGhC,4D,GA7BUlB,aAwCZmB,EAAa,urCA8CJH,IClFKS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0b7a84a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\n// import \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass TextInput extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"tests\">\r\n            <textarea\r\n            title=\"Editor\"\r\n            name=\"input\"\r\n            id=\"editor\"\r\n            cols=\"30\"\r\n            rows=\"10\"\r\n            placeholder=\"type here...\"\r\n            value={this.props.value}\r\n            onChange={this.props.handleInput}\r\n            className=\"box left\"\r\n          >\r\n\r\n          </textarea>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextInput;\r\n","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nconst marked = require('marked');\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\nmarked.setOptions({\r\n   gfm: true,\r\n   breaks: true\r\n})\r\n\r\n// add _blank to target in a tag\r\nrenderer.link = (address = \"#\", title = \"\", content = \"\") => (\r\n   `<a target=\"_blank\" href=${address} title=${title}>${content}</a>`\r\n)\r\n\r\nclass TextOutput extends Component {\r\n  markItUp(a) {\r\n\r\n    return {__html: a};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"tests\">\r\n      <div\r\n        dangerouslySetInnerHTML = {this.markItUp(marked(this.props.value))}\r\n        className=\"box right\"\r\n        id=\"preview\">\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TextOutput;\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TextInput from \"./TextInput\";\nimport TextOutput from \"./TextOutput\"\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: defaultHolder\n    };\n    this.handleUserInput = this.handleUserInput.bind(this);\n  }\n  handleUserInput(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">React Markdown Previewer</h1>\n        </header>\n        <div className=\"container\">\n          <TextInput\n            handleInput={this.handleUserInput}\n            value={this.state.userInput}\n          />\n          <TextOutput value={this.state.userInput}/>\n        </div>\n\n        <footer>\n          by Mocanu Sebastian\n        </footer>\n\n      </div>\n    );\n  }\n}\n\n\n\nconst defaultHolder =\n`# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n      ![React Logo w/ Text](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/320px-React-icon.svg.png)\n`\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}